module BoundSlabs{

  message BSPopulateMsg {
    int st [];
    int sz []; 
    double facetCntrs []; 
    long long slabIDs [];
  };
 
  message BndFacesMsg{
    double cntrs []; 
    long long ids []; 
  };

  message AdjFacesMsg{
    long long fst_ids []; 
    long long snd_ids[]; 
  };

  message UpdIDsMsg{
    long long ids []; 
  };

  message TargetBndMsg; 
  message SndBndMsg;

  array [3D] BoundSlabs{
    entry BoundSlabs(int M_geom);
    entry void Populate(BSPopulateMsg * msg);
  
    entry void BSIterate(){
      for (iter = 1 ; iter < max_iter; iter++){
        if (ExpectGetBound()){
          case {
            when SndBndFaces[iter](TargetBndMsg * msg) serial {SndSlabFaces(msg);}
            when GetAdjacentSlabs[iter](SndBndMsg * sb_msg),
                 RecvSlabFaces[iter](BndFacesMsg * fs_msg) serial { FindAdjSlabs(sb_msg, fs_msg);}          
          }
        }
        when UpdateSlabIDs[iter](UpdIDsMsg * umsg)
              serial{UpdSlabIDs(umsg); } 
      } // end of for iteration 
      if (ExpectGetBound()){
        case {
          when SndBndFaces[iter](TargetBndMsg * msg) serial {SndSlabFaces(msg);}
          when GetAdjacentSlabs[iter](SndBndMsg * sb_msg),
               RecvSlabFaces[iter](BndFacesMsg * fs_msg) serial{ FindAdjSlabs(sb_msg, fs_msg);}          
        }
      }
    };

    entry void SndBndFaces(TargetBndMsg * sb_msg);
    entry void RecvSlabFaces(BndFacesMsg * fs_msg); 
    entry void GetAdjacentSlabs(SndBndMsg * sb_msg); 
    entry void UpdateSlabIDs(UpdIDsMsg * msg);
  };

}
